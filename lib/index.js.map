{"version":3,"file":"index.js","sources":["src/index.js"],"sourcesContent":["import toInteger from 'lodash.tointeger';\n\nconst empty = [];\n\nfunction multiSplice(array, start, deleteCount, inserts, argsLength) {\n  if (!Array.isArray(array)) {\n    throw new TypeError('Need an array to splice.');\n  }\n  if (!Array.isArray(inserts)) {\n    throw new TypeError('Inserts array much be an array.');\n  }\n  if (argsLength === 1) {\n    return [];\n  }\n\n  const length = array.length;\n  start = toInteger(start);\n  if (start < 0) {\n    start = Math.max(length + start, 0);\n  } else {\n    start = Math.min(start, length);\n  }\n\n  if (argsLength === 2) {\n    deleteCount = length - start;\n  } else {\n    deleteCount = Math.min(Math.max(toInteger(deleteCount), 0), length - start);\n  }\n\n  let i;\n  const removals = Array(deleteCount);\n  for (i = 0; i < deleteCount; i++) {\n    removals[i] = array[i + start];\n  }\n\n  const insertCount = inserts.length;\n  const edge = start + insertCount;\n  const need = Math.max(edge - length, 0);\n\n  for (i = length; i < edge; i++) {\n    array[i] = inserts[i - start];\n  }\n  if (insertCount) {\n    for (i = length - insertCount + need; i < length - deleteCount; i++) {\n      array[i + insertCount] = array[i + deleteCount];\n    }\n    for (i = length - 1 - deleteCount; i >= edge; i--) {\n      array[i] = array[i - insertCount];\n    }\n  }\n  if (deleteCount) {\n    for (i = start; i < length - insertCount; i++) {\n      array[i + insertCount] = array[i + deleteCount];\n    }\n  }\n  for (i = need; i < insertCount; i++) {\n    array[i + start - need] = inserts[i - need];\n  }\n\n  if (deleteCount) {\n    array.length = length - deleteCount + insertCount;\n  }\n\n  return removals;\n}\n\nexport default function(array, start, deleteCount, inserts = empty) {\n  return multiSplice(array, start, deleteCount, inserts, arguments.length);\n}\n"],"names":["empty","multiSplice","array","start","deleteCount","inserts","argsLength","Array","isArray","TypeError","length","toInteger","Math","max","min","i","removals","insertCount","edge","need","arguments"],"mappings":";;;;;;;;AAEA,IAAMA,QAAQ,EAAd;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,WAAnC,EAAgDC,OAAhD,EAAyDC,UAAzD,EAAqE;MAC/D,CAACC,MAAMC,OAAN,CAAcN,KAAd,CAAL,EAA2B;UACnB,IAAIO,SAAJ,CAAc,0BAAd,CAAN;;MAEE,CAACF,MAAMC,OAAN,CAAcH,OAAd,CAAL,EAA6B;UACrB,IAAII,SAAJ,CAAc,iCAAd,CAAN;;MAEEH,eAAe,CAAnB,EAAsB;WACb,EAAP;;;MAGII,SAASR,MAAMQ,MAArB;UACQC,UAAUR,KAAV,CAAR;MACIA,QAAQ,CAAZ,EAAe;YACLS,KAAKC,GAAL,CAASH,SAASP,KAAlB,EAAyB,CAAzB,CAAR;GADF,MAEO;YACGS,KAAKE,GAAL,CAASX,KAAT,EAAgBO,MAAhB,CAAR;;;MAGEJ,eAAe,CAAnB,EAAsB;kBACNI,SAASP,KAAvB;GADF,MAEO;kBACSS,KAAKE,GAAL,CAASF,KAAKC,GAAL,CAASF,UAAUP,WAAV,CAAT,EAAiC,CAAjC,CAAT,EAA8CM,SAASP,KAAvD,CAAd;;;MAGEY,UAAJ;MACMC,WAAWT,MAAMH,WAAN,CAAjB;OACKW,IAAI,CAAT,EAAYA,IAAIX,WAAhB,EAA6BW,GAA7B,EAAkC;aACvBA,CAAT,IAAcb,MAAMa,IAAIZ,KAAV,CAAd;;;MAGIc,cAAcZ,QAAQK,MAA5B;MACMQ,OAAOf,QAAQc,WAArB;MACME,OAAOP,KAAKC,GAAL,CAASK,OAAOR,MAAhB,EAAwB,CAAxB,CAAb;;OAEKK,IAAIL,MAAT,EAAiBK,IAAIG,IAArB,EAA2BH,GAA3B,EAAgC;UACxBA,CAAN,IAAWV,QAAQU,IAAIZ,KAAZ,CAAX;;MAEEc,WAAJ,EAAiB;SACVF,IAAIL,SAASO,WAAT,GAAuBE,IAAhC,EAAsCJ,IAAIL,SAASN,WAAnD,EAAgEW,GAAhE,EAAqE;YAC7DA,IAAIE,WAAV,IAAyBf,MAAMa,IAAIX,WAAV,CAAzB;;SAEGW,IAAIL,SAAS,CAAT,GAAaN,WAAtB,EAAmCW,KAAKG,IAAxC,EAA8CH,GAA9C,EAAmD;YAC3CA,CAAN,IAAWb,MAAMa,IAAIE,WAAV,CAAX;;;MAGAb,WAAJ,EAAiB;SACVW,IAAIZ,KAAT,EAAgBY,IAAIL,SAASO,WAA7B,EAA0CF,GAA1C,EAA+C;YACvCA,IAAIE,WAAV,IAAyBf,MAAMa,IAAIX,WAAV,CAAzB;;;OAGCW,IAAII,IAAT,EAAeJ,IAAIE,WAAnB,EAAgCF,GAAhC,EAAqC;UAC7BA,IAAIZ,KAAJ,GAAYgB,IAAlB,IAA0Bd,QAAQU,IAAII,IAAZ,CAA1B;;;MAGEf,WAAJ,EAAiB;UACTM,MAAN,GAAeA,SAASN,WAAT,GAAuBa,WAAtC;;;SAGKD,QAAP;;;AAGF,YAAe,UAASd,KAAT,EAAgBC,KAAhB,EAAuBC,WAAvB,EAAqD;MAAjBC,OAAiB,uEAAPL,KAAO;;SAC3DC,YAAYC,KAAZ,EAAmBC,KAAnB,EAA0BC,WAA1B,EAAuCC,OAAvC,EAAgDe,UAAUV,MAA1D,CAAP;;;;;;;","sourceRoot":"/source/"}